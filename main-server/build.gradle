def queryDslVersion = "6.11"

dependencies {
    implementation project(':common')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.mysql:mysql-connector-j'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly  'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly  'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    // AWS S3 (R2 호환)
    implementation platform('software.amazon.awssdk:bom:2.25.55')
    implementation 'software.amazon.awssdk:s3'

    //  QueryDSL (OpenFeign 6.11 / APT, jakarta)
    implementation("io.github.openfeign.querydsl:querydsl-core:${queryDslVersion}")
    implementation("io.github.openfeign.querydsl:querydsl-jpa:$queryDslVersion")
    annotationProcessor("io.github.openfeign.querydsl:querydsl-apt:$queryDslVersion:jpa")

    // (선택) 일부 환경에서 annotation 처리 시 필요할 수 있음
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}


def querydslSrcDir  = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
}

sourceSets {
    main {
        java {
            srcDirs += querydslSrcDir
        }
    }
}
configurations {
    querydsl.extendsFrom compileClasspath
}

bootJar {
    archiveFileName = 'main-server.jar'
}